<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:component-scan base-package="com.mmall" annotation-config="true"/>

    <!--读取datasource.properties文件，另一种方式如下，区别还不清楚-->
    <!--<context:property-placeholder location="classpath:datasource.properties"/>-->
    <bean id="propertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--order配置bean的初始化的优先级，越小的数优先级越高，默认是最低的优先级-->
        <property name="order" value="2"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:datasource.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="utf-8"/>
    </bean>

    <!--创建数据库连接池-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${db.driverClassName}"/>
        <property name="url" value="${db.url}"/>
        <property name="username" value="${db.username}"/>
        <property name="password" value="${db.password}"/>
        <!-- 连接池启动时的初始值 -->
        <property name="initialSize" value="${db.initialSize}"/>
        <!-- 连接池的最大值 -->
        <property name="maxActive" value="${db.maxActive}"/>
        <!-- 最大空闲值.当经过一个高峰时间后，连接池可以慢慢将已经用不到的连接慢慢释放一部分，一直减少到maxIdle为止 -->
        <property name="maxIdle" value="${db.maxIdle}"/>
        <!-- 最小空闲值.当空闲的连接数少于阀值时，连接池就会预申请去一些连接，以免洪峰来时来不及申请 -->
        <property name="minIdle" value="${db.minIdle}"/>
        <!-- 最大建立连接等待时间。如果超过此时间将接到异常。设为－1表示无限制 -->
        <property name="maxWait" value="${db.maxWait}"/>
        
        <property name="defaultAutoCommit" value="${db.defaultAutoCommit}"/>
        <!-- 回收被遗弃的（一般是忘了释放的）数据库连接到连接池中 -->
         <!--<property name="removeAbandoned" value="true" />-->
        <!-- 数据库连接过多长时间不用将被视为被遗弃而收回连接池中 -->
         <!--<property name="removeAbandonedTimeout" value="120" />-->
        <!-- #连接的超时时间，默认为半小时。 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}"/>

        <!--# 失效检查线程运行时间间隔，要小于MySQL默认-->
        <property name="timeBetweenEvictionRunsMillis" value="40000"/>
        <!--# 检查连接是否有效-->
        <property name="testWhileIdle" value="true"/>
        <!--# 检查连接有效性的SQL语句-->
        <property name="validationQuery" value="SELECT 1 FROM dual"/>
    </bean>

    <!--本项目中没有mybatis的全局配置文件，如果有的话在这里进行引入-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:mappers/*Mapper.xml"/>

        <!--引入mybatis的全局文件-->
        <!--<property name="configLocation" value="classpath:mybatis_config.xml"/>-->

        <!--扫描pojo所在的包，这样在mapper.xml中使用到pojo类作为传入参数或返回结果集时就可以直接使用类名，不用
        使用类的全路径名，当要扫描多个包时，每个包之间使用“;”隔开-->
        <property name="typeAliasesPackage" value="com/mmall/pojo"/>
    
            <!-- PageHelper分页插件 -->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            dialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>

    </bean>
    
    <bean class="com.mmall.dao.RedisDao">
        <constructor-arg index="0" value="${redis.ip}"/>
        <constructor-arg index="1" value="${redis.port}"/>
    </bean>

    <!--使用自动扫描的方式创建mapper bean，即自动扫描dao层的接口包，mybatis通过动态代理实现接口方法，并将实例注入到spring容器中-->
    <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--使用sqlSessionFactoryBeanName注入sqlSessionFactory,通常只有在有多个dataSource的时候才需要配置，单个dateSource的情况下可以省略-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />

        <property name="basePackage" value="com.mmall.dao"/>
    </bean>

    <!--配置事务管理，实际上本项目并没有使用到事务-->
    <!-- 事务管理的核心类TransactionManager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="rollbackOnCommitFailure" value="true"/>
    </bean>
    <!-- 使用@Transactional进行声明式事务管理需要声明下面这行，用于激活@Transaction注解；
         proxy-target-class属性是配置是使用AOP时是
         使用基于接口的JDK代理（设为false,默认）还是使用基于实体类的cglib代理（设为true），
         使用cglib代理后就不能使用JDK代理了，此时在接口上的@annotation注解就无效了，运行代理时要是没有找到
         对应的实体类，就会报错，实际上默认的使用JDK代理时spring会自动判断，如果目标类是接口就使用JDK代理，不是就
         使用cglib代理，所以这个设置可以不管，默认就行-->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    
</beans>