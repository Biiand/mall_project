<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--进行包扫描,包内的类将被自动注册为spring管理的bean,
        只扫描有@Controller注解的web相关的bean，使用context:include-filter注解进行过滤，
        因为SpringMVC有单独的ioc容器，作为Spring的子容器和Spring的ioc容器独立，子容器可以访问父容器，反之不行-->
    <context:component-scan base-package="com.mmall.controller" use-default-filters="false" annotation-config="true">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!--当在web.xml中将DispatcherServlet的ServletURL配置为“/”时，需要添加下面这个注解，用于访问静态资源，在SpringMVC将请求和Handler匹配的同时，
       这个配置会开启将请求向默认的servlet进行转发，这样就能访问到静态资源-->
    <!--
         <mvc:default-servlet-handler/>
    -->

    <!--mvc:annotation-driven的作用：
        （1）自动注册了DefaultAnnotationHandlerMapping,DefaultAnnotationHandlerAdaptor这两个SpringMVC的组件；
        （2）提供一系列的功能支持：数据绑定，日期与数字的转换（@NumberFormat,@DateTimeFormat）,xml和json的默认读写支持
    -->
    <mvc:annotation-driven>
        <!--message-converters标签内注册指定的MessageConverter,该MessageConverter会覆盖默认的消息转换器-->
        <mvc:message-converters>
            <!--注册消息转换器用于转换plain和html类型的文件-->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>text/plain;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
            <!--这里使用Jackson作为Controller返回值的Json序列化的Converter,因为不是Spring默认的Converter,
                所以在pom中要引入Jackson的依赖，MappingJacksonHttpMessageConverter使用Jackson来转换返回值，
                使用已废弃的版本是因为项目使用的Jackson是1.9的，替代的Converter需要2.*的支持-->
            <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!-- 处理文件上传 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10485760"/> <!-- 上传文件最大为10m -->
        <property name="maxInMemorySize" value="4096" />
        <property name="defaultEncoding" value="UTF-8"/>
    </bean>
    
    <!--定义拦截器进行管理员操作的权限验证-->
    <mvc:interceptors>
        <!--直接在interceptors下配置bean会拦截所有的请求，业务只需要拦截一部分，所以在interceptor下配置-->
        <mvc:interceptor>
            <!--manage/* 只匹配到manage的下一级，manage/**匹配下一级及其子级-->
            <mvc:mapping path="/manage/**"/>
            <!--配置将不需要拦截器拦截的方法放过，例如登陆方法，也可以在拦截器中通过代码判断类名和方法名的方式实现，那样更灵活-->
            <!--<mvc:exclude-mapping path="/manage/user/login.do"/>-->
            <bean class="com.mmall.controller.common.interceptor.AuthorityInterceptor"/>
        </mvc:interceptor>
    </mvc:interceptors>


</beans>
